-- Таблица пользователей (управляется Supabase Auth)
-- create extension if not exists "uuid-ossp";

-- Таблица продуктов
CREATE TABLE IF NOT EXISTS products (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    images JSONB,
    main_image_index INTEGER DEFAULT 0,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Таблица прайс-листов
CREATE TABLE IF NOT EXISTS price_lists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    items JSONB NOT NULL DEFAULT '[]'::jsonb,
    is_public BOOLEAN DEFAULT FALSE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Таблица заказов
CREATE TABLE IF NOT EXISTS orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    price_list_id BIGINT REFERENCES price_lists(id) ON DELETE SET NULL,
    customer_name VARCHAR(255) NOT NULL,
    customer_phone VARCHAR(100) NOT NULL,
    customer_email VARCHAR(255) NOT NULL,
    customer_comment TEXT,
    items JSONB NOT NULL DEFAULT '[]'::jsonb,
    total DECIMAL(10, 2) NOT NULL,
    status VARCHAR(50) DEFAULT 'new',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Настройка RLS для защиты данных

-- Включаем RLS для всех таблиц
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE price_lists ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;

-- Политики для таблицы products
CREATE POLICY products_select_own ON products 
    FOR SELECT TO authenticated 
    USING (auth.uid() = user_id);

CREATE POLICY products_insert_own ON products 
    FOR INSERT TO authenticated 
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY products_update_own ON products 
    FOR UPDATE TO authenticated 
    USING (auth.uid() = user_id) 
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY products_delete_own ON products 
    FOR DELETE TO authenticated 
    USING (auth.uid() = user_id);

-- Политики для таблицы price_lists
CREATE POLICY price_lists_select_own ON price_lists 
    FOR SELECT TO authenticated 
    USING (auth.uid() = user_id);

CREATE POLICY price_lists_insert_own ON price_lists 
    FOR INSERT TO authenticated 
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY price_lists_update_own ON price_lists 
    FOR UPDATE TO authenticated 
    USING (auth.uid() = user_id) 
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY price_lists_delete_own ON price_lists 
    FOR DELETE TO authenticated 
    USING (auth.uid() = user_id);

-- Политики доступа к публичным прайс-листам для любых пользователей
CREATE POLICY price_lists_select_public ON price_lists 
    FOR SELECT 
    USING (is_public = TRUE);

-- Политики для таблицы orders
CREATE POLICY orders_select_own ON orders 
    FOR SELECT TO authenticated 
    USING (price_list_id IN (SELECT id FROM price_lists WHERE user_id = auth.uid()));

CREATE POLICY orders_insert_anon ON orders 
    FOR INSERT 
    WITH CHECK (TRUE);  -- Разрешаем анонимным пользователям создавать заказы

CREATE POLICY orders_update_own ON orders 
    FOR UPDATE TO authenticated 
    USING (price_list_id IN (SELECT id FROM price_lists WHERE user_id = auth.uid())) 
    WITH CHECK (price_list_id IN (SELECT id FROM price_lists WHERE user_id = auth.uid()));

-- Добавляем политику для доступа к товарам из публичных прайс-листов
CREATE POLICY products_select_from_public_price_lists ON products 
    FOR SELECT 
    USING (id IN (
        SELECT DISTINCT p.id 
        FROM products p
        JOIN price_lists pl ON p.user_id = pl.user_id
        WHERE pl.is_public = TRUE
    )); 